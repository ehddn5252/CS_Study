# 동기 vs 비동기

![동기_비동기](https://user-images.githubusercontent.com/87989933/172766025-3fad13e5-ac4a-42a5-a4b5-e684dbce75d1.png)

## 동기 (Synchronous)

동시에 일어난다는 뜻으로, 요청과 결과가 동시에 일어난다.

직렬적으로 태스크(task)를 수행하며, 어떤 작업이 수행중이면 다음 작업은 대기하게 된다.

동기 방식은 서버에서 요청을 보냈을 때 응답이 돌아와야 다음 동작을 수행할 수 있다. 즉 A작업이 모두 진행 될때까지 B작업은 대기해야한다.

**장점**

- 설계가 매우 간단하고 직관적이다.

**단점**

- 결과가 주어질 때까지 아무것도 못하고 대기해야 한다.

<br/>

## 비동기 (Asynchronous)

동시에 일어나지 않는다는 뜻으로, 요청한 결과는 동시에 일어나지 않는다.

병렬적으로 태스크를 수행하며, 태스크가 종료되지 않은 상태라 하더라도 대기하지 않고 다음 태스크를 실행한다.

비동기 방식은 반대로 요청을 보냈을 때 응답 상태와 상관없이 다음 동작을 수행 할 수 있다. 즉 A작업이 시작하면 동시에 B작업이 실행된다. A작업은 결과값이 나오는대로 출력된다.

ex) 자바스크립트의 대부분의 DOM 이벤트와 Timer 함수(setTimeout, setInterval), Ajax 요청

**장점**

- 결과가 주어지는데 시간이 걸리더라도 그 시간동안 다른 작업을 할 수 있어서 자원을 효율적으로 사용할 수 있다.

**단점**

- 동기보다 복잡하다.

<br/>

### 동기 vs 비동기

일반적으로 동기와 비동기의 차이는 메소드를 실행시킴과 **동시에** 반환 값이 기대되는 경우를 **동기** 라고 표현하고 그렇지 않은 경우에 대해서 **비동기** 라고 표현한다. 동시에라는 말은 실행되었을 때 값이 반환되기 전까지는 **blocking** 되어 있다는 것을 의미한다. 비동기의 경우, **blocking** 되지 않고 이벤트 큐에 넣거나 백그라운드 스레드에게 해당 task 를 위임하고 바로 다음 코드를 실행하기 때문에 기대되는 값이 바로 반환되지 않는다.

### 블로킹 (Blocking)

- 제어권이 호출된 함수에게 넘어가서 호출된 함수 내에서 작업이 모두 끝난 후 호출한 함수에게 다시 제어권이 넘어온다.
- 작업이 완료된 후 새로운 작업을 수행할 수 있다.

### 논 블로킹 (Non-Blocking)

- 제어권이 계속 호출한 함수에 있기 때문에 작업의 완료여부와 관계없이 새로운 작업을 수행할 수 있다.

<br/>

## 참고

[https://private.tistory.com/24](https://private.tistory.com/24)
